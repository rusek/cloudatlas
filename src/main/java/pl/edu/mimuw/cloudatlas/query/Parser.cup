/* A parser for the **CloudAtlas** query language */

import pl.edu.mimuw.cloudatlas.attributes.*;
import java.util.*;
import java_cup.runtime.*;

parser code {:

    public void syntax_error(Symbol cur_token) {
        report_error("Line " + (cur_token.left + 1) + ", column " + (cur_token.right + 1) + ": syntax error", null);
    }

:};

/* Terminals (tokens returned by the scanner) */
terminal           SEMICOLON, COMMA, PLUS, MINUS, STAR, SLASH, PERCENT, LEFT_PARENTHESIS, RIGHT_PARENTHESIS,
                   LESS, LESS_EQUAL, GREATER, GREATER_EQUAL, EQUAL, NOT_EQUAL, 
                   KEYWORD_AND, KEYWORD_OR, KEYWORD_NOT, KEYWORD_ASC, KEYWORD_DESC, KEYWORD_NULLS,
                   KEYWORD_SELECT, KEYWORD_WHERE, KEYWORD_ORDER, KEYWORD_BY, KEYWORD_AS, KEYWORD_FIRST,
                   KEYWORD_LAST, KEYWORD_REGEXP, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE, LEFT_ANGLE, RIGHT_ANGLE;
terminal           UNARY_MINUS; /* artificial */ 
terminal String    IDENTIFIER, STRING_LITERAL;
terminal Long      INTEGER_LITERAL;
terminal Double    DOUBLE_LITERAL;
terminal Boolean   BOOLEAN_LITERAL;

/* Non-terminals (elements generating AST nodes) */
non terminal List<Stmt>   statement_list;
non terminal Stmt         statement;
non terminal Expr         basic_expr, where_clause, cond_expr, cond_expr_ngt;
non terminal BinOp        cmp_op, cmp_op_ngt;
non terminal List<Expr>   expr_list, expr_list_ngt;
non terminal List<NamedExpr> sel_list;
non terminal NamedExpr    sel_item;
non terminal List<OrderExpr> order_clause, order_list;
non terminal OrderExpr    order_item;
non terminal Ord          ord;
non terminal NullOrd      null_ord;

precedence left KEYWORD_OR;
precedence left KEYWORD_AND;
precedence left KEYWORD_NOT;
precedence left EQUAL, NOT_EQUAL, LESS, LESS_EQUAL, GREATER, GREATER_EQUAL, KEYWORD_REGEXP;
precedence left PLUS, MINUS;
precedence left STAR, SLASH, PERCENT;
precedence left UNARY_MINUS;

start with statement_list;

statement_list ::=
    statement:s SEMICOLON statement_list:sl
    {: sl.add(0, s); RESULT = sl; :}
    |
    statement:s
    {: List<Stmt> sl = new LinkedList<Stmt>(); sl.add(s); RESULT = sl; :}
    ;

expr_list ::=
    cond_expr:e COMMA expr_list:el
    {: el.add(0, e); RESULT = el; :}
    |
    cond_expr:e
    {: List<Expr> el = new LinkedList<Expr>(); el.add(e); RESULT = el; :}
    ;

expr_list_ngt ::=
    cond_expr_ngt:e COMMA expr_list_ngt:el
    {: el.add(0, e); RESULT = el; :}
    |
    cond_expr_ngt:e
    {: List<Expr> el = new LinkedList<Expr>(); el.add(e); RESULT = el; :}
    ;

statement ::=
    KEYWORD_SELECT sel_list:sl where_clause:wc order_clause:oc
    {: RESULT = new SelectStmt(sl, wc, oc); :}
    ;

sel_list ::=
    sel_item:s COMMA sel_list:sl
    {: sl.add(0, s); RESULT = sl; :}
    |
    sel_item:s
    {: List<NamedExpr> sl = new LinkedList<NamedExpr>(); sl.add(s); RESULT = sl; :}
    ;

sel_item ::=
    cond_expr:e 
    {: RESULT = new NamedExpr(e, null); :}
    |
    cond_expr:e KEYWORD_AS IDENTIFIER:name
    {: RESULT = new NamedExpr(e, name); :}
    ;

where_clause ::=
    KEYWORD_WHERE cond_expr:e
    {: RESULT = e; :}
    |
    {: RESULT = null; :}
    ;

order_clause ::=
    KEYWORD_ORDER KEYWORD_BY order_list:ol
    {: RESULT = ol; :}
    |
    {: RESULT = null; :}
    ;

order_list ::=
    order_item:oi COMMA order_list:ol
    {: ol.add(0, oi); RESULT = ol; :}
    |
    order_item:oi
    {: List<OrderExpr> ol = new LinkedList<OrderExpr>(); ol.add(oi); RESULT = ol; :}
    ; 

order_item ::=
    cond_expr:e ord:o null_ord:no
    {: RESULT = new OrderExpr(e, o, no); :}
    ;

ord ::=
    KEYWORD_ASC
    {: RESULT = Ord.ASC; :}
    |
    KEYWORD_DESC
    {: RESULT = Ord.DESC; :}
    |
    {: RESULT = Ord.ASC; :}
    ;

null_ord ::=
    KEYWORD_NULLS KEYWORD_FIRST
    {: RESULT = NullOrd.NULLS_FIRST; :}
    |
    KEYWORD_NULLS KEYWORD_LAST
    {: RESULT = NullOrd.NULLS_LAST; :}
    |
    {: RESULT = NullOrd.UNKNOWN; :}
    ;

cond_expr_ngt ::=
    cond_expr_ngt:le KEYWORD_OR cond_expr_ngt:re
    {: RESULT = new BinExpr(le, re, BinOp.OR); :}
    |
    cond_expr_ngt:le KEYWORD_AND cond_expr_ngt:re
    {: RESULT = new BinExpr(le, re, BinOp.AND); :}
    |
    KEYWORD_NOT cond_expr_ngt:e
    {: RESULT = new UnExpr(e, UnOp.NOT); :}
    |
    basic_expr:le cmp_op_ngt:op basic_expr:re
    {: RESULT = new BinExpr(le, re, op); :}
    |
    basic_expr:e KEYWORD_REGEXP STRING_LITERAL:sl
    {: RESULT = new RegexpExpr(e, sl); :}
    |
    basic_expr:e
    {: RESULT = e; :}
    ;

cond_expr ::=
    cond_expr:le KEYWORD_OR cond_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.OR); :}
    |
    cond_expr:le KEYWORD_AND cond_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.AND); :}
    |
    KEYWORD_NOT cond_expr:e
    {: RESULT = new UnExpr(e, UnOp.NOT); :}
    |
    basic_expr:le cmp_op:op basic_expr:re
    {: RESULT = new BinExpr(le, re, op); :}
    |
    basic_expr:e KEYWORD_REGEXP STRING_LITERAL:sl
    {: RESULT = new RegexpExpr(e, sl); :}
    |
    basic_expr:e
    {: RESULT = e; :}
    ;

cmp_op_ngt ::=
    LESS
    {: RESULT = BinOp.LT; :}
    |
    LESS_EQUAL
    {: RESULT = BinOp.LE; :}
    |
    GREATER_EQUAL
    {: RESULT = BinOp.GE; :}
    |
    EQUAL
    {: RESULT = BinOp.EQ; :}
    |
    NOT_EQUAL
    {: RESULT = BinOp.NE; :}
    ;

cmp_op ::=
    cmp_op_ngt:op
    {: RESULT = op; :}
    |
    GREATER
    {: RESULT = BinOp.GT; :}
    ;

basic_expr ::=
    basic_expr:le PLUS basic_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.ADD); :}
    |
    basic_expr:le MINUS basic_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.SUB); :}
    |
    basic_expr:le STAR basic_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.MUL); :}
    |
    basic_expr:le SLASH basic_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.DIV); :}
    |
    basic_expr:le PERCENT basic_expr:re
    {: RESULT = new BinExpr(le, re, BinOp.MOD); :}
    |
    MINUS basic_expr:e
    {: RESULT = new UnExpr(e, UnOp.NEG); :}
    %prec UNARY_MINUS
    
    |
    IDENTIFIER:attrName
    {: RESULT = new AttributeExpr(attrName); :}
    |
    IDENTIFIER:funcName LEFT_PARENTHESIS RIGHT_PARENTHESIS
    {: RESULT = new CallExpr(funcName, new LinkedList<Expr>()); :}
    |
    IDENTIFIER:funcName LEFT_PARENTHESIS expr_list:params RIGHT_PARENTHESIS
    {: RESULT = new CallExpr(funcName, params); :}
    |
    LEFT_PARENTHESIS cond_expr:e RIGHT_PARENTHESIS
    {: RESULT = e; :}
    |
    LEFT_PARENTHESIS statement:s RIGHT_PARENTHESIS
    {: RESULT = new StmtExpr(s); :}
    |
    INTEGER_LITERAL:v
    {: RESULT = new ValueExpr(new IntegerValue(v)); :}
    |
    DOUBLE_LITERAL:v
    {: RESULT = new ValueExpr(new DoubleValue(v)); :}
    |
    STRING_LITERAL:v
    {: RESULT = new ValueExpr(new StringValue(v)); :}
    |
    BOOLEAN_LITERAL:v
    {: RESULT = new ValueExpr(new BooleanValue(v)); :}
    |
    LEFT_BRACKET RIGHT_BRACKET
    {: RESULT = new ValueExpr(new IntegerValue(123456)); :} /* FIXME */
    |
    LEFT_BRACE RIGHT_BRACE
    {: RESULT = new ValueExpr(new IntegerValue(123456)); :} /* FIXME */
    |
    LEFT_ANGLE expr_list_ngt:el RIGHT_ANGLE
    {: RESULT = new TupleExpr(el); :}
    ;
